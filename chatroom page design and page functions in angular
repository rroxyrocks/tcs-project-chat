package com.javainuse.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.EventListener;
import org.springframework.messaging.simp.SimpMessageSendingOperations;
import org.springframework.messaging.simp.stomp.StompHeaderAccessor;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.messaging.SessionConnectedEvent;
import org.springframework.web.socket.messaging.SessionDisconnectEvent;

import com.javainuse.domain.WebSocketChatMessage;

@Component
public class WebSocketChatEventListener {

    @Autowired
    private SimpMessageSendingOperations messagingTemplate;
@EventListener
    public void handleWebSocketConnectListener(SessionConnectedEvent event) {
        System.out.println("Received a new web socket connection");
    }

    @EventListener
    public void handleWebSocketDisconnectListener(SessionDisconnectEvent event) {
        StompHeaderAccessor headerAccessor = StompHeaderAccessor.wrap(event.getMessage());

        String username = (String) headerAccessor.getSessionAttributes().get("username");
        if(username != null) {

            WebSocketChatMessage chatMessage = new WebSocketChatMessage();
            chatMessage.setType("Leave");
            chatMessage.setSender(username);

            messagingTemplate.convertAndSend("/topic/public", chatMessage);
        }
    }
}


#alternative coding for interface
#chat componenet
<header>
     <nav class="navbar navbar-expand-md navbar-dark bg-dark">
         <a class="navbar-brand" href="#">Chat app</a>
         <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarsExample04" aria-controls="navbarsExample04" aria-expanded="false" aria-label="Toggle navigation">
           <span class="navbar-toggler-icon"></span>
         </button>

         <div class="collapse navbar-collapse" id="navbarsExample04">
           <ul class="navbar-nav mr-auto">
           </ul>
         </div>
       </nav>
 </header>

 <main class="chat">
     <div class="container">
         <div class="chat-content">
             <div class="card">
                 <ul class="list-group list-group-flush">
                     <li class="list-group-item" *ngFor="let chatMessage of webSocketService.chatMessages">
                         <strong>{{chatMessage.user}}: </strong>
                         <span>{{chatMessage.message}}</span>
                     </li>
                 </ul>
             </div>
         </div>
         <form (ngSubmit)="sendMessage(sendForm)" #sendForm="ngForm">
             <div class="chat-send row">
                 <div class="col-2">
                     <input type="text" class="form-control" name="user" id="input-user" ngModel>
                 </div>
                 <div class="col-8">
                     <input type="text" class="form-control" name="message" id="input-message" ngModel>
                 </div>
                 <div class="col-2">
                     <button type="submit" class="btn btn-primary">Send</button>
                 </div>
             </div>
         </form>
     </div>

 </main> 
 
 
 .chat {
     margin-top: 10rem;
 }

 div.chat-content {
     border-radius: .25rem;
     height: 40rem;
     margin-bottom: 2rem;
 }

 .card {
 
 
 
 import { async, ComponentFixture, TestBed } from '@angular/core/testing';

 import { ChatComponent } from './chat.component';

 describe('ChatComponent', () => {
   let component: ChatComponent;
   let fixture: ComponentFixture<ChatComponent>;

   beforeEach(async(() => {
     TestBed.configureTestingModule({
       declarations: [ ChatComponent ]
     })
     .compileComponents();
   }));

   beforeEach(() => {
     fixture = TestBed.createComponent(ChatComponent);
     component = fixture.componentInstance;
     fixture.detectChanges();
   });

   it('should create', () => {
     expect(component).toBeTruthy();
   });
 });
 
 
 
 import { Component, OnInit, OnDestroy } from '@angular/core';
 import { NgForm } from '@angular/forms';
 import { WebSocketService } from '../services/web-socket.service';
 import { ChatMessageDto } from '../models/chatMessageDto';

 @Component({
   selector: 'cf-chat',
   templateUrl: './chat.component.html',
   styleUrls: ['./chat.component.scss']
 })
 export class ChatComponent implements OnInit, OnDestroy {

   constructor(public webSocketService: WebSocketService) { }

   ngOnInit(): void {
     this.webSocketService.openWebSocket();
   }

   ngOnDestroy(): void {
     this.webSocketService.closeWebSocket();
   }

   sendMessage(sendForm: NgForm) {
     const chatMessageDto = new ChatMessageDto(sendForm.value.user, sendForm.value.message);
     this.webSocketService.sendMessage(chatMessageDto);
     sendForm.controls.message.reset();
   }
 }
     height: 100%;
 } 


#chat message
export class ChatMessageDto {
     user: string;
     message: string;

     constructor(user: string, message: string){
         this.user = user;
         this.message = message;
     }
 }
 
 
 import { TestBed } from '@angular/core/testing';

 import { WebSocketService } from './web-socket.service';

 describe('WebSocketService', () => {
   let service: WebSocketService;

   beforeEach(() => {
     TestBed.configureTestingModule({});
     service = TestBed.inject(WebSocketService);
   });

   it('should be created', () => {
     expect(service).toBeTruthy();
   });
 });
 
 
 import { Injectable } from '@angular/core';
 import { ChatMessageDto } from '../models/chatMessageDto';

 @Injectable({
   providedIn: 'root'
 })
 export class WebSocketService {

   webSocket: WebSocket;
   chatMessages: ChatMessageDto[] = [];

   constructor() { }

   public openWebSocket(){
     this.webSocket = new WebSocket('ws://localhost:8080/chat');

     this.webSocket.onopen = (event) => {
       console.log('Open: ', event);
     };

     this.webSocket.onmessage = (event) => {
       const chatMessageDto = JSON.parse(event.data);
       this.chatMessages.push(chatMessageDto);
     };

     this.webSocket.onclose = (event) => {
       console.log('Close: ', event);
     };
   }

   public sendMessage(chatMessageDto: ChatMessageDto){
     this.webSocket.send(JSON.stringify(chatMessageDto));
   }

   public closeWebSocket() {
     this.webSocket.close();
   }
 }
 
 
 
 <?xml version="1.0" encoding="UTF-8"?>
 <module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
   <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_5">
     <output url="file://$MODULE_DIR$/target/classes" />
     <output-test url="file://$MODULE_DIR$/target/test-classes" />
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/target" />
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module> 
